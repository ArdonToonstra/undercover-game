@page "/game/{gameId}"
@using RoamingRoutes.Shared.Models.Games
@using RoamingRoutes.Client.Services
@using Microsoft.AspNetCore.Components.Web
@inject RoamingRoutes.Client.Services.ILocalGameService GameService
@inject NavigationManager Navigation

 
<div class="min-h-screen bg-gradient-to-br from-indigo-50 to-purple-100">
    @if (gameState == null)
    {
        <!-- Loading State -->
        <div class="flex items-center justify-center min-h-screen">
            <div class="text-center">
                <div class="animate-spin rounded-full h-16 w-16 border-b-2 border-indigo-500 mx-auto mb-4"></div>
                <h2 class="text-xl font-semibold text-gray-700">Loading Game...</h2>
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="mt-4 text-red-600">@errorMessage</div>
                    <button @onclick="BackToLobby" 
                            class="mt-2 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg">
                        Back to Lobby
                    </button>
                }
            </div>
        </div>
    }
    else
    {
        <div class="container mx-auto px-4 py-8">
            <!-- Game Header -->
            <div class="bg-white rounded-xl shadow-lg p-6 mb-6">
                <div class="flex items-center justify-between mb-4">
                    <div>
                        <h1 class="text-3xl font-bold text-gray-800">Game @gameState.GameId</h1>
                        <p class="text-gray-600">Status: <span class="font-semibold">@gameState.Status</span></p>
                    </div>
                    <div class="text-right">
                        <div class="text-sm text-gray-600">Round @gameState.CurrentRound</div>
                        <div class="text-sm text-gray-600">Players: @gameState.Players.Count/@gameState.MaxPlayers</div>
                    </div>
                </div>

                <!-- Players List -->
                <div class="grid grid-cols-2 md:grid-cols-4 gap-3">
                    @foreach (var player in gameState.Players)
                    {
                        <div class="bg-gray-50 rounded-lg p-3 text-center @(player.IsHost ? "ring-2 ring-yellow-400" : "")">
                            <div class="text-sm font-medium @(player.IsAlive ? "text-gray-800" : "text-red-500 line-through")">
                                @player.Nickname
                            </div>
                            @if (player.IsHost)
                            {
                                <div class="text-xs text-yellow-600">üëë Host</div>
                            }
                            <div class="text-xs @(player.IsAlive ? "text-green-600" : "text-red-600")">
                                @(player.IsAlive ? "Alive" : "Eliminated")
                            </div>
                        </div>
                    }
                </div>
            </div>

            @if (gameState.Status == GameStatus.WaitingForPlayers)
            {
                <!-- Waiting Room -->
                <div class="bg-white rounded-xl shadow-lg p-8 text-center">
                    <h2 class="text-2xl font-bold text-gray-800 mb-4">Waiting for Players</h2>
                    <p class="text-gray-600 mb-6">Share this game ID with friends: <span class="font-mono bg-gray-100 px-2 py-1 rounded">@gameState.GameId</span></p>
                    
                    @if (isHost)
                    {
                        <button @onclick="StartGame" disabled="@(gameState.Players.Count < 2 || isStartingGame)"
                                class="bg-green-600 hover:bg-green-700 disabled:bg-gray-400 text-white font-semibold py-3 px-8 rounded-lg">
                            @if (isStartingGame)
                            {
                                <span>Starting Game...</span>
                            }
                            else if (gameState.Players.Count < 2)
                            {
                                <span>Need at least 2 players</span>
                            }
                            else
                            {
                                <span>Start Game</span>
                            }
                        </button>
                    }
                    else
                    {
                        <p class="text-gray-500">Waiting for the host to start the game...</p>
                    }
                </div>
            }
            else if (gameState.Status == GameStatus.InProgress)
            {
                <!-- Game In Progress -->
                <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                    <!-- Game Area -->
                    <div class="lg:col-span-2">
                        <div class="bg-white rounded-xl shadow-lg p-6">
                            <h2 class="text-xl font-semibold text-gray-800 mb-4">Game Area</h2>
                            
                            @if (gameState.VotingPhase)
                            {
                                <!-- Voting Phase -->
                                <div class="text-center mb-6">
                                    <h3 class="text-lg font-medium text-orange-600 mb-2">üó≥Ô∏è Voting Phase</h3>
                                    <p class="text-gray-600">Vote to eliminate a player</p>
                                </div>

                                <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
                                    @foreach (var player in gameState.Players.Where(p => p.IsAlive && p.Id != currentPlayerId))
                                    {
                                        <button @onclick="() => VotePlayer(player.Id)"
                                                class="bg-red-100 hover:bg-red-200 border border-red-300 rounded-lg p-3 text-left transition-colors">
                                            <div class="font-medium text-red-800">@player.Nickname</div>
                                            <div class="text-sm text-red-600">Click to vote eliminate</div>
                                        </button>
                                    }
                                </div>
                            }
                            else
                            {
                                <!-- Discussion Phase -->
                                <div class="text-center mb-6">
                                    <h3 class="text-lg font-medium text-blue-600 mb-2">üí≠ Discussion Phase</h3>
                                    <p class="text-gray-600">Discuss and find the undercover agent!</p>
                                </div>

                                <!-- Guess Input -->
                                <div class="bg-gray-50 rounded-lg p-4 mb-4">
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Make a guess:</label>
                                    <div class="flex gap-2">
                                        <input @bind="currentGuess" @onkeypress="HandleGuessKeyPress"
                                               class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" 
                                               placeholder="Enter your guess..." />
                                        <button @onclick="SubmitGuess" disabled="@(string.IsNullOrWhiteSpace(currentGuess) || isSubmittingGuess)"
                                                class="bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 text-white px-4 py-2 rounded-lg">
                                            Submit
                                        </button>
                                    </div>
                                </div>

                                <!-- Call Vote Button -->
                                <div class="text-center">
                                    <button @onclick="CallVote" disabled="@isCallingVote"
                                            class="bg-orange-600 hover:bg-orange-700 disabled:bg-gray-400 text-white font-semibold py-2 px-6 rounded-lg">
                                        @if (isCallingVote)
                                        {
                                            <span>Calling Vote...</span>
                                        }
                                        else
                                        {
                                            <span>Call for Vote</span>
                                        }
                                    </button>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Activity Feed -->
                    <div class="bg-white rounded-xl shadow-lg p-6">
                        <h2 class="text-xl font-semibold text-gray-800 mb-4">Recent Activity</h2>
                        
                        @if (gameState.RecentGuesses?.Any() == true)
                        {
                            <div class="space-y-3 max-h-96 overflow-y-auto">
                                @foreach (var guess in gameState.RecentGuesses.OrderByDescending(g => g.Timestamp))
                                {
                                    <div class="bg-gray-50 rounded-lg p-3">
                                        <div class="font-medium text-gray-800">@guess.PlayerName</div>
                                        <div class="text-sm text-gray-600">@guess.GuessedWord</div>
                                        <div class="text-xs text-gray-500">@guess.Timestamp.ToString("HH:mm:ss")</div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <p class="text-gray-500 text-center py-8">No activity yet. Start making guesses!</p>
                        }
                    </div>
                </div>
            }
            else if (gameState.Status == GameStatus.Finished)
            {
                <!-- Game Finished -->
                <div class="bg-white rounded-xl shadow-lg p-8 text-center">
                    <h2 class="text-3xl font-bold text-gray-800 mb-4">üéâ Game Over!</h2>
                    <p class="text-gray-600 mb-6">The game has ended.</p>
                    
                    <div class="space-y-2 mb-6">
                        @foreach (var player in gameState.Players)
                        {
                            <div class="@(player.IsAlive ? "text-green-600 font-semibold" : "text-gray-600")">
                                @player.Nickname - @(player.IsAlive ? "Winner! üèÜ" : "Eliminated")
                            </div>
                        }
                    </div>

                    <button @onclick="BackToLobby" 
                            class="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-8 rounded-lg">
                        Back to Lobby
                    </button>
                </div>
            }

            <!-- Error Messages -->
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="mt-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
                    @errorMessage
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter] public string GameId { get; set; } = "";
    
    private GameStateDTO? gameState;
    private string currentPlayerId = "";
    private bool isHost = false;
    private string errorMessage = "";
    
    // Game actions
    private bool isStartingGame = false;
    private bool isCallingVote = false;
    private bool isSubmittingGuess = false;
    private string currentGuess = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadGameState();
        
        // Start polling for game state updates every 3 seconds
        _ = Task.Run(async () =>
        {
            while (true)
            {
                await Task.Delay(3000);
                await LoadGameState();
                await InvokeAsync(StateHasChanged);
            }
        });
    }

    private async Task LoadGameState()
    {
        try
        {
            errorMessage = "";
            gameState = await GameService.GetGameStateAsync(GameId);
            
            if (gameState == null)
            {
                errorMessage = "Game not found or error loading game state.";
            }
            else
            {
                // Check if current user is the host (this is simplified - in a real app you'd track the current player properly)
                isHost = gameState.Players.Any(p => p.IsHost);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading game: {ex.Message}";
        }
    }

    private async Task StartGame()
    {
        if (isStartingGame) return;
        
        isStartingGame = true;
        try
        {
            // This would be a real API call in a complete implementation
            // For now, we'll just refresh the game state
            await LoadGameState();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error starting game: {ex.Message}";
        }
        finally
        {
            isStartingGame = false;
        }
    }

    private async Task SubmitGuess()
    {
        if (isSubmittingGuess || string.IsNullOrWhiteSpace(currentGuess)) return;
        
        isSubmittingGuess = true;
        try
        {
            // This would be a real API call to submit a guess
            // For now, we'll just clear the input and refresh
            currentGuess = "";
            await LoadGameState();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error submitting guess: {ex.Message}";
        }
        finally
        {
            isSubmittingGuess = false;
        }
    }

    private async Task CallVote()
    {
        if (isCallingVote) return;
        
        isCallingVote = true;
        try
        {
            // This would be a real API call to initiate voting
            // For now, we'll just refresh the game state
            await LoadGameState();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error calling vote: {ex.Message}";
        }
        finally
        {
            isCallingVote = false;
        }
    }

    private async Task VotePlayer(string playerId)
    {
        try
        {
            // This would be a real API call to vote for a player
            // For now, we'll just refresh the game state
            await LoadGameState();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error voting: {ex.Message}";
        }
    }

    private async Task HandleGuessKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !isSubmittingGuess)
        {
            await SubmitGuess();
        }
    }

    private void BackToLobby()
    {
        Navigation.NavigateTo("/game/lobby");
    }
}
