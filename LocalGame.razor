@page "/game/local"
@using RoamingRoutes.Shared.Models.Games
@using RoamingRoutes.Client.Services
@using Microsoft.AspNetCore.Components.Web
@rendermode InteractiveWebAssembly

<PageTitle>Local Rounds Game - Roaming Routes</PageTitle>

<div class="min-h-screen bg-gradient-to-br from-purple-50 to-pink-100">
    <div class="container mx-auto px-4 py-8">
        
        @if (gamePhase == GamePhase.Setup)
        {
            <!-- Game Setup -->
            <div class="max-w-2xl mx-auto">
                <div class="bg-white rounded-xl shadow-lg p-8">
                    <h1 class="text-3xl font-bold text-center text-gray-800 mb-2">🎮 Local Rounds Game</h1>
                    <p class="text-gray-600 text-center mb-8">Pass the device around to play with friends!</p>
                    
                    <!-- Player Count Setup -->
                    <div class="mb-6">
                        <h2 class="text-xl font-semibold text-gray-800 mb-4">Game Setup</h2>
                        
                        <!-- Word Category Selection -->
                        <div class="mb-6">
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                Word Category
                            </label>
                            @if (wordCategories.Any())
                            {
                                <select @bind="selectedCategoryName" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500">
                                    @foreach (var category in wordCategories)
                                    {
                                        <option value="@category.Name">@category.Name</option>
                                    }
                                </select>
                                @if (!string.IsNullOrEmpty(selectedCategoryName))
                                {
                                    var selectedCategory = wordCategories.FirstOrDefault(c => c.Name == selectedCategoryName);
                                    @if (selectedCategory != null)
                                    {
                                        <p class="text-sm text-gray-600 mt-1">@selectedCategory.Description</p>
                                        <p class="text-xs text-gray-500 mt-1">@selectedCategory.Pairs.Count word pairs available</p>
                                    }
                                }
                            }
                            else
                            {
                                <div class="text-gray-500 text-sm">Loading word categories...</div>
                            }
                        </div>
                        
                        <!-- Player Count Slider -->
                        <div class="mb-6">
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                Number of Players: @playerCount
                            </label>
                            <input type="range" min="3" max="10" @bind="playerCount" @oninput="OnPlayerCountChanged"
                                   class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider" />
                            <div class="flex justify-between text-xs text-gray-500 mt-1">
                                <span>3</span>
                                <span>4</span>
                                <span>5</span>
                                <span>6</span>
                                <span>7</span>
                                <span>8</span>
                                <span>9</span>
                                <span>10</span>
                            </div>
                        </div>

                        <!-- Role Distribution -->
                        <div class="bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg p-4 mb-6">
                            <h3 class="text-lg font-semibold text-gray-800 mb-3">Role Distribution</h3>
                            <div class="grid grid-cols-3 gap-4">
                                <div class="text-center">
                                    <div class="w-12 h-12 bg-blue-500 rounded-full flex items-center justify-center mx-auto mb-2">
                                        <span class="text-white font-bold">@GetCivilianCount()</span>
                                    </div>
                                    <div class="text-sm font-medium text-gray-700">Civilians</div>
                                    <div class="text-xs text-gray-500">Good guys</div>
                                </div>
                                <div class="text-center">
                                    <div class="w-12 h-12 bg-red-500 rounded-full flex items-center justify-center mx-auto mb-2">
                                        <span class="text-white font-bold">@GetUndercoverCount()</span>
                                    </div>
                                    <div class="text-sm font-medium text-gray-700">Undercover</div>
                                    <div class="text-xs text-gray-500">Secret agent</div>
                                </div>
                                <div class="text-center">
                                    <div class="w-12 h-12 bg-gray-500 rounded-full flex items-center justify-center mx-auto mb-2">
                                        <span class="text-white font-bold">@GetMisterWhiteCount()</span>
                                    </div>
                                    <div class="text-sm font-medium text-gray-700">Mr. White</div>
                                    <div class="text-xs text-gray-500">Mystery role</div>
                                </div>
                            </div>
                        </div>

                        <!-- Suggested Players -->
                        @if (suggestedNames.Any())
                        {
                            <div class="bg-gradient-to-r from-green-50 to-blue-50 rounded-lg p-4 mb-6">
                                <h3 class="text-lg font-semibold text-gray-800 mb-3">Quick Start - Suggested Players</h3>
                                <div class="grid grid-cols-2 gap-2">
                                    @foreach (var name in suggestedNames.Take(playerCount - players.Count))
                                    {
                                        <button @onclick="() => AddSuggestedPlayer(name)"
                                                class="bg-white hover:bg-gray-50 border border-gray-200 rounded-lg px-3 py-2 text-sm font-medium text-gray-700 transition-colors">
                                            + @name
                                        </button>
                                    }
                                </div>
                                @if (suggestedNames.Count > playerCount - players.Count)
                                {
                                    <button @onclick="GenerateSuggestedNames" 
                                            class="mt-2 text-sm text-blue-600 hover:text-blue-800 underline">
                                        🎲 Generate different names
                                    </button>
                                }
                            </div>
                        }
                        
                        <!-- Players Setup -->
                        <h3 class="text-lg font-semibold text-gray-800 mb-3">Add Players</h3>
                        
                        <div class="flex gap-2 mb-4">
                            <input @bind="newPlayerName" @onkeypress="HandleAddPlayerKeyPress"
                                   class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500" 
                                   placeholder="Enter player name" maxlength="20" />
                            <button @onclick="AddPlayer" disabled="@string.IsNullOrWhiteSpace(newPlayerName)"
                                    class="bg-purple-600 hover:bg-purple-700 disabled:bg-gray-400 text-white px-6 py-2 rounded-lg">
                                Add
                            </button>
                        </div>
                        
                        @if (!string.IsNullOrEmpty(setupErrorMessage))
                        {
                            <div class="text-red-600 text-sm mb-4">@setupErrorMessage</div>
                        }
                        
                        <!-- Players List -->
                        @if (players.Any())
                        {
                            <div class="space-y-2 mb-4">
                                @for (int i = 0; i < players.Count; i++)
                                {
                                    var index = i; // Capture for lambda
                                    <div class="flex items-center justify-between bg-gray-50 rounded-lg p-3">
                                        <span class="font-medium text-gray-800">@players[i].Name</span>
                                        <button @onclick="() => RemovePlayer(index)"
                                                class="text-red-500 hover:text-red-700 text-sm">
                                            Remove
                                        </button>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                    
                    <button @onclick="StartGameAsync" disabled="@(players.Count < playerCount || players.Count != playerCount)"
                            class="w-full bg-green-600 hover:bg-green-700 disabled:bg-gray-400 text-white font-semibold py-3 px-4 rounded-lg">
                        @if (players.Count < playerCount)
                        {
                            <span>Need @playerCount players (@players.Count/@playerCount added)</span>
                        }
                        else if (players.Count > playerCount)
                        {
                            <span>Too many players! Remove @(players.Count - playerCount) player(s)</span>
                        }
                        else
                        {
                            <span>Start Undercover Game (@players.Count players)</span>
                        }
                    </button>
                </div>
            </div>
        }
        else if (gamePhase == GamePhase.RoleAssignment)
        {
            <!-- Role Assignment Phase -->
            <div class="max-w-2xl mx-auto">
                <div class="bg-white rounded-xl shadow-lg p-8 text-center">
                    <h1 class="text-3xl font-bold text-gray-800 mb-2">🃏 Role Assignment</h1>
                    <p class="text-gray-600 mb-8">Each player picks a card to discover their role!</p>
                    
                    <!-- Current Player Indicator -->
                    <div class="bg-blue-50 border border-blue-200 rounded-lg p-6 mb-8">
                        <h2 class="text-2xl font-bold text-blue-800 mb-2">
                            @players[currentCardIndex].Name's Turn
                        </h2>
                        <p class="text-blue-600">
                            Pass the device to @players[currentCardIndex].Name to pick their card
                        </p>
                    </div>

                    <!-- Available Cards Display -->
                    <div class="mb-8">
                        <h3 class="text-lg font-semibold text-gray-800 mb-4">
                            Cards Remaining: @availableCards.Count
                        </h3>
                        <div class="grid grid-cols-5 gap-3 max-w-md mx-auto">
                            @for (int i = 0; i < availableCards.Count; i++)
                            {
                                var cardIndex = i;
                                <div class="aspect-square bg-gradient-to-br from-purple-500 to-pink-500 rounded-lg flex items-center justify-center cursor-pointer hover:from-purple-600 hover:to-pink-600 transition-colors"
                                     @onclick="() => PickCard(cardIndex)">
                                    <span class="text-white text-2xl">🃏</span>
                                </div>
                            }
                        </div>
                    </div>

                    @if (cardRevealed)
                    {
                        <!-- Card Revealed -->
                        <div class="bg-gradient-to-r from-yellow-50 to-orange-50 border border-yellow-200 rounded-lg p-6 mb-6">
                            <h3 class="text-xl font-bold text-gray-800 mb-4">Your Role:</h3>
                            
                            @if (currentPlayerRole == "Civilian")
                            {
                                <div class="text-center">
                                    <div class="w-16 h-16 bg-blue-500 rounded-full flex items-center justify-center mx-auto mb-4">
                                        <span class="text-white text-2xl">👤</span>
                                    </div>
                                    <h4 class="text-lg font-bold text-blue-600 mb-2">CIVILIAN</h4>
                                    <p class="text-gray-600 mb-4">You are on the good side! Your word is:</p>
                                    <div class="bg-blue-100 rounded-lg p-4">
                                        <span class="text-2xl font-bold text-blue-800">@currentPlayerWord</span>
                                    </div>
                                </div>
                            }
                            else if (currentPlayerRole == "Undercover")
                            {
                                <div class="text-center">
                                    <div class="w-16 h-16 bg-red-500 rounded-full flex items-center justify-center mx-auto mb-4">
                                        <span class="text-white text-2xl">🕵️</span>
                                    </div>
                                    <h4 class="text-lg font-bold text-red-600 mb-2">UNDERCOVER</h4>
                                    <p class="text-gray-600 mb-4">You are the undercover agent! Your word is:</p>
                                    <div class="bg-red-100 rounded-lg p-4">
                                        <span class="text-2xl font-bold text-red-800">@currentPlayerWord</span>
                                    </div>
                                </div>
                            }
                            else if (currentPlayerRole == "Mr. White")
                            {
                                <div class="text-center">
                                    <div class="w-16 h-16 bg-gray-500 rounded-full flex items-center justify-center mx-auto mb-4">
                                        <span class="text-white text-2xl">❓</span>
                                    </div>
                                    <h4 class="text-lg font-bold text-gray-600 mb-2">MR. WHITE</h4>
                                    <p class="text-gray-600 mb-4">You don't know the word! Try to blend in and figure out what everyone is talking about.</p>
                                    <div class="bg-gray-100 rounded-lg p-4">
                                        <span class="text-lg font-bold text-gray-600">No word for you!</span>
                                    </div>
                                </div>
                            }
                        </div>

                        <button @onclick="ConfirmRole" 
                                class="bg-green-600 hover:bg-green-700 text-white font-semibold py-3 px-8 rounded-lg">
                            ✓ Got it! Pass to next player
                        </button>
                    }
                </div>
            </div>
        }
        else if (gamePhase == GamePhase.Playing)
        {
            <!-- Game Playing -->
            <div class="max-w-4xl mx-auto">
                <!-- Game Header -->
                <div class="bg-white rounded-xl shadow-lg p-6 mb-6">
                    <div class="flex items-center justify-between mb-4">
                        <h1 class="text-2xl font-bold text-gray-800">Round @currentRound</h1>
                        <div class="text-right">
                            <div class="text-sm text-gray-600">Players Alive: @players.Count(p => p.IsAlive)</div>
                            <div class="text-sm text-gray-600">Total Rounds: @currentRound</div>
                        </div>
                    </div>

                    <!-- Turn Order Display -->
                    <div class="bg-gray-50 rounded-lg p-4 mb-4">
                        <h3 class="text-sm font-semibold text-gray-700 mb-2">Turn Order:</h3>
                        <div class="flex flex-wrap gap-2">
                            @for (int i = 0; i < players.Count; i++)
                            {
                                var displayIndex = (currentPlayerIndex + i) % players.Count;
                                var player = players[displayIndex];
                                var isCurrentPlayer = displayIndex == currentPlayerIndex;
                                var isAlive = player.IsAlive;
                                
                                <div class="@(isCurrentPlayer ? "bg-blue-500 text-white" : isAlive ? "bg-white text-gray-800" : "bg-gray-300 text-gray-500") 
                                           border @(isCurrentPlayer ? "border-blue-600" : "border-gray-200") 
                                           rounded-lg px-3 py-1 text-sm font-medium @(!isAlive ? "opacity-50 line-through" : "")">
                                    @if (isCurrentPlayer && isAlive)
                                    {
                                        <span class="mr-1">👑</span>
                                    }
                                    @player.Name
                                    @if (i < players.Count - 1)
                                    {
                                        <span class="ml-2 text-gray-400">→</span>
                                    }
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Current Turn Indicator -->
                    @if (currentPlayerIndex >= 0 && currentPlayerIndex < players.Count)
                    {
                        <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
                            <div class="text-center">
                                <div class="text-lg font-semibold text-blue-800">
                                    🎯 @players[currentPlayerIndex].Name's Turn
                                </div>
                                <div class="text-sm text-blue-600">
                                    Pass the device to @players[currentPlayerIndex].Name
                                </div>
                            </div>
                        </div>
                    }

                    <!-- Players Status -->
                    <div class="grid grid-cols-2 md:grid-cols-4 gap-3">
                        @foreach (var player in players)
                        {
                            <div class="bg-gray-50 rounded-lg p-3 text-center @(player.IsAlive ? "" : "opacity-50")">
                                <div class="font-medium @(player.IsAlive ? "text-gray-800" : "text-red-500 line-through")">
                                    @player.Name
                                </div>
                                <div class="text-xs @(player.IsAlive ? "text-green-600" : "text-red-600")">
                                    @(player.IsAlive ? "Alive" : "Eliminated")
                                </div>
                                @if (player.Score > 0)
                                {
                                    <div class="text-xs text-blue-600">Score: @player.Score</div>
                                }
                            </div>
                        }
                    </div>
                </div>

                @if (!votingPhase)
                {
                    <!-- Discussion Phase -->
                    <div class="bg-white rounded-xl shadow-lg p-6 mb-6">
                        <h2 class="text-xl font-semibold text-gray-800 mb-4">💭 Discussion Phase</h2>
                        <p class="text-gray-600 mb-6">Players discuss and try to find the undercover agent!</p>
                        
                        <!-- Action Buttons -->
                        <div class="flex flex-col sm:flex-row gap-4">
                            <button @onclick="CallVote"
                                    class="flex-1 bg-orange-600 hover:bg-orange-700 text-white font-semibold py-3 px-6 rounded-lg">
                                🗳️ Call for Vote
                            </button>
                            <button @onclick="NextPlayer"
                                    class="flex-1 bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg">
                                ➡️ Next Player's Turn
                            </button>
                        </div>
                    </div>
                }
                else
                {
                    <!-- Voting Phase -->
                    <div class="bg-white rounded-xl shadow-lg p-6 mb-6">
                        <h2 class="text-xl font-semibold text-orange-600 mb-4">🗳️ Voting Phase</h2>
                        <p class="text-gray-600 mb-6">Vote to eliminate a player. Each player votes in turn.</p>
                        
                        @if (currentVoterIndex >= 0 && currentVoterIndex < alivePlayers.Count)
                        {
                            <div class="bg-orange-50 border border-orange-200 rounded-lg p-4 mb-6">
                                <div class="text-center">
                                    <div class="text-lg font-semibold text-orange-800">
                                        @alivePlayers[currentVoterIndex].Name is voting
                                    </div>
                                    <div class="text-sm text-orange-600">
                                        Pass the device to @alivePlayers[currentVoterIndex].Name to vote
                                    </div>
                                </div>
                            </div>
                        }
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-3 mb-6">
                            @foreach (var player in alivePlayers.Where(p => alivePlayers.IndexOf(p) != currentVoterIndex))
                            {
                                <button @onclick="() => VotePlayer(player)"
                                        class="bg-red-100 hover:bg-red-200 border border-red-300 rounded-lg p-4 text-left transition-colors">
                                    <div class="font-medium text-red-800">Vote to eliminate @player.Name</div>
                                    @if (votes.ContainsKey(player.Name))
                                    {
                                        <div class="text-sm text-red-600">Votes: @votes[player.Name]</div>
                                    }
                                </button>
                            }
                        </div>
                    </div>
                }
            </div>
        }
        else if (gamePhase == GamePhase.Finished)
        {
            <!-- Game Finished -->
            <div class="max-w-2xl mx-auto">
                <div class="bg-white rounded-xl shadow-lg p-8 text-center">
                    <h1 class="text-3xl font-bold text-gray-800 mb-4">🎉 Game Over!</h1>
                    
                    <div class="space-y-3 mb-8">
                        @foreach (var player in players.OrderByDescending(p => p.Score))
                        {
                            <div class="@(player.IsAlive ? "text-green-600 font-semibold text-lg" : "text-gray-600")">
                                @if (player.IsAlive && players.Count(p => p.IsAlive) == 1)
                                {
                                    <span>🏆 </span>
                                }
                                @player.Name - @(player.IsAlive ? "Winner!" : $"Eliminated (Round {player.EliminatedRound})")
                                @if (player.Score > 0)
                                {
                                    <span class="text-sm"> - Score: @player.Score</span>
                                }
                            </div>
                        }
                    </div>

                    <div class="space-y-4">
                        <button @onclick="PlayAgainAsync" 
                                class="bg-green-600 hover:bg-green-700 text-white font-semibold py-3 px-8 rounded-lg mr-4">
                            🔄 Play Again
                        </button>
                        <button @onclick="BackToLobby" 
                                class="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-8 rounded-lg">
                            🏠 Back to Rounds
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private enum GamePhase
    {
        Setup,
        RoleAssignment,
        Playing,
        Finished
    }

    private class LocalPlayer
    {
        public string Name { get; set; } = "";
        public bool IsAlive { get; set; } = true;
        public int Score { get; set; } = 0;
        public int EliminatedRound { get; set; } = 0;
    }

    private class GameLogEntry
    {
        public DateTime Timestamp { get; set; } = DateTime.Now;
        public string Message { get; set; } = "";
    }

    // Game state
    private GamePhase gamePhase = GamePhase.Setup;
    private List<LocalPlayer> players = new();
    private List<GameLogEntry> gameLog = new();
    private int currentRound = 1;
    private int currentPlayerIndex = 0;
    private bool votingPhase = false;
    private int currentVoterIndex = 0;
    private Dictionary<string, int> votes = new();

    // Role assignment phase
    private int currentCardIndex = 0;
    private List<string> availableCards = new();
    private string civilianWord = "";
    private string undercoverWord = "";
    private List<string> assignedRoles = new(); // Track what role each player got
    private bool cardRevealed = false;
    private string currentPlayerRole = "";
    private string currentPlayerWord = "";

    // Setup phase
    private string newPlayerName = "";
    private string setupErrorMessage = "";
    private int playerCount = 4; // Default to 4 players
    private List<string> suggestedNames = new();
    private int editingPlayerIndex = -1;
    private string editingPlayerName = "";

    // Word category selection
    private List<WordPairCategory> wordCategories = new();
    private string selectedCategoryName = "Travel Words"; // Default to travel words

    // Funny player names for quick setup
    private readonly List<string> funnyNames = new()
    {
        "Captain Obvious", "Sneaky Pete", "Detective Dan", "Mystery Mike", "Sherlock Bones",
        "Agent Smith", "Spy Guy", "Secret Sam", "Curious Cat", "Nosy Nancy",
        "Undercover Bob", "Hidden Henry", "Covert Carl", "Stealth Steve", "Shadow Sally",
        "Clue Hunter", "Truth Seeker", "Riddle Master", "Puzzle Pro", "Mystery Maven",
        "Silent Sarah", "Whisper Will", "Quiet Quinn", "Hushed Hannah", "Mute Max",
        "Deduction Dave", "Logic Lisa", "Reason Ray", "Smart Sara", "Wise Will"
    };

    // Computed properties
    private List<LocalPlayer> alivePlayers => players.Where(p => p.IsAlive).ToList();

    protected override async Task OnInitializedAsync()
    {
        LogMessage("Game started! Add players to begin.");
        GenerateSuggestedNames();
        await LoadWordCategories();
    }

    private async Task LoadWordCategories()
    {
        try
        {
            wordCategories = await WordPairService.GetCategoriesAsync();
            
            // Set default category if not already set or if current selection doesn't exist
            if (string.IsNullOrEmpty(selectedCategoryName) || 
                !wordCategories.Any(c => c.Name == selectedCategoryName))
            {
                selectedCategoryName = wordCategories.FirstOrDefault()?.Name ?? "";
            }
        }
        catch (Exception ex)
        {
            LogMessage($"Warning: Could not load word categories. Using default words. Error: {ex.Message}");
            // Fallback to a basic category
            wordCategories = new List<WordPairCategory>
            {
                new WordPairCategory
                {
                    Name = "Basic Words",
                    Description = "Simple everyday words",
                    Pairs = new List<WordPair>
                    {
                        new WordPair { Civilian = "Coffee", Undercover = "Tea" },
                        new WordPair { Civilian = "Dog", Undercover = "Cat" },
                        new WordPair { Civilian = "Car", Undercover = "Bus" }
                    }
                }
            };
            selectedCategoryName = "Basic Words";
        }
        StateHasChanged();
    }

    private void HandleAddPlayerKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            AddPlayer();
        }
    }

    private void AddPlayer()
    {
        setupErrorMessage = "";
        
        if (string.IsNullOrWhiteSpace(newPlayerName))
        {
            setupErrorMessage = "Please enter a player name.";
            return;
        }

        if (players.Any(p => p.Name.Equals(newPlayerName.Trim(), StringComparison.OrdinalIgnoreCase)))
        {
            setupErrorMessage = "A player with this name already exists.";
            return;
        }

        if (players.Count >= playerCount)
        {
            setupErrorMessage = $"Maximum {playerCount} players allowed for this game.";
            return;
        }

        players.Add(new LocalPlayer { Name = newPlayerName.Trim() });
        LogMessage($"{newPlayerName.Trim()} joined the game!");
        newPlayerName = "";
    }

    private void RemovePlayer(int index)
    {
        if (index >= 0 && index < players.Count)
        {
            var playerName = players[index].Name;
            players.RemoveAt(index);
            LogMessage($"{playerName} left the game.");
            
            // Regenerate suggested names if we have fewer players than needed
            if (players.Count < playerCount)
            {
                GenerateSuggestedNames();
            }
        }
    }

    private async Task StartGame()
    {
        if (players.Count != playerCount)
        {
            setupErrorMessage = $"Need exactly {playerCount} players to start.";
            return;
        }

        try
        {
            // Get random word pair from selected category
            var selectedPair = await WordPairService.GetRandomPairFromCategoryAsync(selectedCategoryName);
            civilianWord = selectedPair.Civilian;
            undercoverWord = selectedPair.Undercover;
        }
        catch (Exception ex)
        {
            LogMessage($"Warning: Could not load words from category '{selectedCategoryName}'. Using fallback words. Error: {ex.Message}");
            // Fallback to default words
            civilianWord = "Coffee";
            undercoverWord = "Tea";
        }

        // Initialize role assignment phase
        gamePhase = GamePhase.RoleAssignment;
        currentCardIndex = 0;
        cardRevealed = false;
        
        // Create available cards based on role distribution
        availableCards.Clear();
        assignedRoles.Clear();
        
        // Add civilian cards
        for (int i = 0; i < GetCivilianCount(); i++)
        {
            availableCards.Add("Civilian");
        }
        
        // Add undercover cards
        for (int i = 0; i < GetUndercoverCount(); i++)
        {
            availableCards.Add("Undercover");
        }
        
        // Add Mr. White cards
        for (int i = 0; i < GetMisterWhiteCount(); i++)
        {
            availableCards.Add("Mr. White");
        }
        
        // Shuffle the cards
        var random = new Random();
        for (int i = availableCards.Count - 1; i > 0; i--)
        {
            int j = random.Next(i + 1);
            (availableCards[i], availableCards[j]) = (availableCards[j], availableCards[i]);
        }
        
        LogMessage($"Role assignment started! {players[currentCardIndex].Name}, pick your card.");
    }

    private async Task StartGameAsync()
    {
        await StartGame();
    }

    // Role assignment methods
    private void PickCard(int cardIndex)
    {
        if (cardRevealed) return;

        // Get the role from the selected card
        currentPlayerRole = availableCards[cardIndex];
        
        // Set the word based on role
        if (currentPlayerRole == "Civilian")
        {
            currentPlayerWord = civilianWord;
        }
        else if (currentPlayerRole == "Undercover")
        {
            currentPlayerWord = undercoverWord;
        }
        else // Mr. White
        {
            currentPlayerWord = "";
        }
        
        // Remove the card from available cards
        availableCards.RemoveAt(cardIndex);
        
        // Record the role assignment
        assignedRoles.Add(currentPlayerRole);
        
        cardRevealed = true;
    }

    private void ConfirmRole()
    {
        cardRevealed = false;
        currentCardIndex++;
        
        // Check if all players have their roles
        if (currentCardIndex >= players.Count)
        {
            // Determine turn order - Mr. White cannot start
            DetermineTurnOrder();
            
            // Start the actual game
            gamePhase = GamePhase.Playing;
            LogMessage($"All roles assigned! Game begins!");
            LogMessage($"Words in play: Civilians have '{civilianWord}', Undercover has '{undercoverWord}'");
            LogMessage($"Turn order: {string.Join(" → ", GetTurnOrderDisplay())}");
            LogMessage($"Round {currentRound} begins. {players[currentPlayerIndex].Name} goes first.");
        }
        else
        {
            LogMessage($"{players[currentCardIndex].Name}, pick your card.");
        }
    }

    private void DetermineTurnOrder()
    {
        // Find players who are not Mr. White
        var nonMrWhitePlayers = new List<int>();
        for (int i = 0; i < players.Count; i++)
        {
            if (assignedRoles[i] != "Mr. White")
            {
                nonMrWhitePlayers.Add(i);
            }
        }
        
        // If we have non-Mr. White players, pick one randomly to start
        if (nonMrWhitePlayers.Any())
        {
            var random = new Random();
            currentPlayerIndex = nonMrWhitePlayers[random.Next(nonMrWhitePlayers.Count)];
        }
        else
        {
            // Edge case: all players are Mr. White (shouldn't happen in normal game)
            currentPlayerIndex = 0;
        }
    }

    private List<string> GetTurnOrderDisplay()
    {
        var turnOrder = new List<string>();
        int playerIndex = currentPlayerIndex;
        
        for (int i = 0; i < players.Count; i++)
        {
            var player = players[playerIndex];
            var role = assignedRoles[playerIndex];
            
            // Add role indicator
            string roleIcon = role switch
            {
                "Civilian" => "👤",
                "Undercover" => "🕵️",
                "Mr. White" => "❓",
                _ => "?"
            };
            
            turnOrder.Add($"{player.Name} {roleIcon}");
            playerIndex = (playerIndex + 1) % players.Count;
        }
        
        return turnOrder;
    }

    // Player count slider handler
    private void OnPlayerCountChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newCount))
        {
            playerCount = newCount;
            GenerateSuggestedNames();
            StateHasChanged();
        }
    }

    // Generate suggested player names based on player count
    private void GenerateSuggestedNames()
    {
        suggestedNames.Clear();
        var random = new Random();
        var availableNames = funnyNames.Where(name => !players.Any(p => p.Name == name)).ToList();
        
        for (int i = 0; i < playerCount && i < availableNames.Count; i++)
        {
            var randomIndex = random.Next(availableNames.Count);
            suggestedNames.Add(availableNames[randomIndex]);
            availableNames.RemoveAt(randomIndex);
        }
    }

    // Add a suggested player
    private void AddSuggestedPlayer(string name)
    {
        if (players.Count >= playerCount)
        {
            setupErrorMessage = $"Maximum {playerCount} players allowed for this game.";
            return;
        }

        if (players.Any(p => p.Name.Equals(name, StringComparison.OrdinalIgnoreCase)))
        {
            setupErrorMessage = "A player with this name already exists.";
            return;
        }

        players.Add(new LocalPlayer { Name = name });
        LogMessage($"{name} joined the game!");
        
        // Remove from suggested names and regenerate if needed
        suggestedNames.Remove(name);
        if (suggestedNames.Count < playerCount - players.Count)
        {
            GenerateSuggestedNames();
        }
    }

    // Role calculation methods
    private int GetCivilianCount()
    {
        return playerCount switch
        {
            3 => 2,  // 2 civilians, 1 undercover, 0 white
            4 => 2,  // 2 civilians, 1 undercover, 1 white
            5 => 3,  // 3 civilians, 1 undercover, 1 white
            6 => 3,  // 3 civilians, 2 undercover, 1 white
            7 => 4,  // 4 civilians, 2 undercover, 1 white
            8 => 4,  // 4 civilians, 2 undercover, 2 white
            9 => 5,  // 5 civilians, 2 undercover, 2 white
            10 => 5, // 5 civilians, 3 undercover, 2 white
            _ => Math.Max(1, playerCount - GetUndercoverCount() - GetMisterWhiteCount())
        };
    }

    private int GetUndercoverCount()
    {
        return playerCount switch
        {
            3 => 1,
            4 => 1,
            5 => 1,
            6 => 2,
            7 => 2,
            8 => 2,
            9 => 2,
            10 => 3,
            _ => 1
        };
    }

    private int GetMisterWhiteCount()
    {
        return playerCount switch
        {
            3 => 0,
            4 => 1,
            5 => 1,
            6 => 1,
            7 => 1,
            8 => 2,
            9 => 2,
            10 => 2,
            _ => playerCount >= 4 ? 1 : 0
        };
    }

    private void NextPlayer()
    {
        do
        {
            currentPlayerIndex = (currentPlayerIndex + 1) % players.Count;
        } while (!players[currentPlayerIndex].IsAlive && alivePlayers.Count > 1);

        if (alivePlayers.Count <= 1)
        {
            EndGame();
            return;
        }

        LogMessage($"{players[currentPlayerIndex].Name}'s turn.");
    }

    private void CallVote()
    {
        if (alivePlayers.Count <= 2)
        {
            LogMessage("Cannot vote with only 2 players remaining.");
            return;
        }

        votingPhase = true;
        currentVoterIndex = 0;
        votes.Clear();
        
        // Initialize vote counts
        foreach (var player in alivePlayers)
        {
            votes[player.Name] = 0;
        }

        LogMessage("Voting phase started! Each player votes to eliminate someone.");
    }

    private void VotePlayer(LocalPlayer targetPlayer)
    {
        if (currentVoterIndex < 0 || currentVoterIndex >= alivePlayers.Count)
            return;

        var voter = alivePlayers[currentVoterIndex];
        votes[targetPlayer.Name]++;
        
        LogMessage($"{voter.Name} voted to eliminate {targetPlayer.Name}.");

        // Move to next voter
        currentVoterIndex++;

        // Check if all players have voted
        if (currentVoterIndex >= alivePlayers.Count)
        {
            ProcessVoteResults();
        }
    }

    private void ProcessVoteResults()
    {
        var maxVotes = votes.Values.Max();
        var playersWithMaxVotes = votes.Where(v => v.Value == maxVotes).Select(v => v.Key).ToList();

        if (playersWithMaxVotes.Count == 1)
        {
            // Clear elimination
            var eliminatedPlayerName = playersWithMaxVotes.First();
            var eliminatedPlayer = players.First(p => p.Name == eliminatedPlayerName);
            eliminatedPlayer.IsAlive = false;
            eliminatedPlayer.EliminatedRound = currentRound;
            
            LogMessage($"{eliminatedPlayerName} was eliminated with {maxVotes} votes!");
        }
        else
        {
            // Tie - no elimination
            LogMessage($"Voting resulted in a tie. No one was eliminated.");
        }

        // End voting phase
        votingPhase = false;
        currentRound++;

        // Check win condition
        if (alivePlayers.Count <= 1)
        {
            EndGame();
        }
        else
        {
            // Continue to next round
            currentPlayerIndex = 0;
            while (!players[currentPlayerIndex].IsAlive)
            {
                currentPlayerIndex = (currentPlayerIndex + 1) % players.Count;
            }
            LogMessage($"Round {currentRound} begins!");
        }
    }

    private void EndGame()
    {
        gamePhase = GamePhase.Finished;
        
        // Award points
        var survivors = alivePlayers.ToList();
        foreach (var survivor in survivors)
        {
            survivor.Score += 100; // Base survival points
            survivor.Score += (currentRound - 1) * 10; // Round bonus
        }

        if (survivors.Count == 1)
        {
            LogMessage($"🎉 {survivors.First().Name} wins the game!");
        }
        else if (survivors.Count > 1)
        {
            LogMessage($"🎉 Game ended with {survivors.Count} survivors!");
        }
        else
        {
            LogMessage("🎉 Game ended - everyone was eliminated!");
        }
    }

    private async Task PlayAgain()
    {
        // Reset game state but keep players
        foreach (var player in players)
        {
            player.IsAlive = true;
            player.Score = 0;
            player.EliminatedRound = 0;
        }

        // Reset to role assignment phase
        gamePhase = GamePhase.RoleAssignment;
        currentRound = 1;
        currentPlayerIndex = 0;
        currentCardIndex = 0;
        votingPhase = false;
        currentVoterIndex = 0;
        votes.Clear();
        gameLog.Clear();
        cardRevealed = false;
        assignedRoles.Clear();
        availableCards.Clear();
        
        try
        {
            // Select new random word pair from current category
            var selectedPair = await WordPairService.GetRandomPairFromCategoryAsync(selectedCategoryName);
            civilianWord = selectedPair.Civilian;
            undercoverWord = selectedPair.Undercover;
        }
        catch (Exception ex)
        {
            LogMessage($"Warning: Could not load words from category '{selectedCategoryName}'. Using fallback words. Error: {ex.Message}");
            // Fallback to default words
            civilianWord = "Coffee";
            undercoverWord = "Tea";
        }
        
        // Recreate available cards
        for (int i = 0; i < GetCivilianCount(); i++)
        {
            availableCards.Add("Civilian");
        }
        for (int i = 0; i < GetUndercoverCount(); i++)
        {
            availableCards.Add("Undercover");
        }
        for (int i = 0; i < GetMisterWhiteCount(); i++)
        {
            availableCards.Add("Mr. White");
        }
        
        // Shuffle the cards
        var random = new Random();
        for (int i = availableCards.Count - 1; i > 0; i--)
        {
            int j = random.Next(i + 1);
            (availableCards[i], availableCards[j]) = (availableCards[j], availableCards[i]);
        }

        LogMessage("New game started! Role assignment begins.");
        LogMessage($"{players[currentCardIndex].Name}, pick your card.");
    }

    private async Task PlayAgainAsync()
    {
        await PlayAgain();
    }

    private void BackToLobby()
    {
        Navigation.NavigateTo("/rounds");
    }

    private void LogMessage(string message)
    {
        gameLog.Add(new GameLogEntry { Message = message, Timestamp = DateTime.Now });
        StateHasChanged();
    }

    [Inject] private NavigationManager Navigation { get; set; } = default!;
    [Inject] private IWordPairClientService WordPairService { get; set; } = default!;
}

<style>
    .slider {
        -webkit-appearance: none;
        appearance: none;
        height: 8px;
        background: linear-gradient(to right, #e5e7eb 0%, #9333ea 50%, #db2777 100%);
        outline: none;
        border-radius: 8px;
    }

    .slider::-webkit-slider-thumb {
        -webkit-appearance: none;
        appearance: none;
        width: 20px;
        height: 20px;
        background: #8b5cf6;
        cursor: pointer;
        border-radius: 50%;
        border: 2px solid white;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }

    .slider::-moz-range-thumb {
        width: 20px;
        height: 20px;
        background: #8b5cf6;
        cursor: pointer;
        border-radius: 50%;
        border: 2px solid white;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }
</style>
