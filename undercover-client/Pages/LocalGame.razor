@page "/"
@using RoamingRoutes.Shared.Models.Games
@using RoamingRoutes.Client.Services
@using Microsoft.AspNetCore.Components.Web
@inject RoamingRoutes.Client.Services.ILocalGameService LocalGameService
@inject RoamingRoutes.Client.Services.IWordPairClientService WordPairService

@code {
    // Simple local class for game results since GameResultDTO is not in the shared models
    public class GameResultDTO
    {
        public string Winner { get; set; } = "";
        public string Reason { get; set; } = "";
    }
}

<div class="container">
    
    @if (gamePhase == GamePhase.Setup)
    {
        <!-- Game Setup -->
        <div class="card">
            <div class="card-header">
                <h1>🎭 Undercover</h1>
                <p style="color: var(--text-muted); text-align: center; margin: 0.5rem 0;">A social deduction game where players try to identify the "undercover" agent(s). Perfect for groups of 3-10 people. Test your wit and deduction skills! <a href="how-to-play" style="font-size:0.95rem; color:var(--accent-primary); text-decoration:none;">Don't know this game? Read it here.</a> </p>
                <p style="color: var(--text-muted); text-align: center; margin: 0; font-size: 0.9rem;">Pass the device around to play with friends.</p>
            </div>
            
            <!-- Word Category Selection -->
            <div class="form-group">
                @if (wordCategories.Any())
                {
                    <div class="custom-select-wrapper">
                        <select @bind="selectedCategoryName" class="custom-select">
                            @{
                                var englishCategories = wordCategories.Where(c => c.Language == "EN").ToList();
                                var dutchCategories = wordCategories.Where(c => c.Language == "NL").ToList();
                            }
                            
                            @if (englishCategories.Any())
                            {
                                <option value="🎲 Mix All English Categories!">🎲 Mix All English Categories!</option>
                                @foreach (var category in englishCategories)
                                {
                                    <option value="@category.Name">@category.Name</option>
                                }
                            }
                            
                            @if (dutchCategories.Any())
                            {
                                <option value="🎲 Mix All Dutch Categories!">🎲 Mix All Dutch Categories!</option>
                                @foreach (var category in dutchCategories)
                                {
                                    <option value="@category.Name">@category.Name</option>
                                }
                            }
                        </select>
                        <div class="select-arrow">▼</div>
                    </div>
                    @if (!string.IsNullOrEmpty(selectedCategoryName))
                    {
                        @if (selectedCategoryName == "🎲 Mix All English Categories!")
                        {
                            <div class="category-info mixed">
                                <p style="color: var(--accent-primary); font-size: 0.9rem; margin-bottom: 0.5rem; font-weight: 600;">All English categories combined for maximum variety!</p>
                                <p style="color: var(--text-muted); font-size: 0.8rem; margin: 0;">@wordCategories.Where(c => c.Language == "EN").Sum(c => c.Pairs.Count) word pairs available</p>
                            </div>
                        }
                        else if (selectedCategoryName == "🎲 Mix All Dutch Categories!")
                        {
                            <div class="category-info mixed">
                                <p style="color: var(--accent-primary); font-size: 0.9rem; margin-bottom: 0.5rem; font-weight: 600;">Alle Nederlandse categorieën gecombineerd voor maximale variatie!</p>
                                <p style="color: var(--text-muted); font-size: 0.8rem; margin: 0;">@wordCategories.Where(c => c.Language == "NL").Sum(c => c.Pairs.Count) woordparen beschikbaar</p>
                            </div>
                        }
                        else
                        {
                            var selectedCategory = wordCategories.FirstOrDefault(c => c.Name == selectedCategoryName);
                            @if (selectedCategory != null)
                            {
                                <div class="category-info">
                                    <p style="color: var(--text-muted); font-size: 0.9rem; margin-bottom: 0.5rem;">@selectedCategory.Description</p>
                                    <p style="color: var(--text-muted); font-size: 0.8rem; margin: 0;">@selectedCategory.Pairs.Count word pairs available</p>
                                </div>
                            }
                        }
                    }
                }
                else
                {
                    <div style="color: var(--text-muted); font-size: 0.9rem;">Loading word categories...</div>
                }
            </div>
            
            <!-- Player Count -->
            <div class="form-group">
                <label class="form-label">Number of players: @playerCount</label>
                <input type="range" min="3" max="10" @bind="playerCount" @oninput="OnPlayerCountChanged" class="form-control" style="height: 2rem;" />
                <div style="display: flex; justify-content: space-between; color: var(--text-muted); font-size: 0.8rem; margin-top: 0.5rem;">
                    <span>3</span><span>4</span><span>5</span><span>6</span><span>7</span><span>8</span><span>9</span><span>10</span>
                </div>
            </div>

            <!-- Role Distribution -->
            <div class="phase-indicator">
                <div class="phase-title">Role Distribution</div>
                <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 1rem; margin-top: 1rem;">
                    <div style="text-align: center;">
                        <div style="position: relative; width: 4rem; height: 4rem; margin: 0 auto 0.5rem;">
                            <img src="Civilian-icon.png" alt="Civilian" style="width: 100%; height: 100%; object-fit: contain;" />
                            <div style="position: absolute; top: -10px; right: -10px; background: var(--accent-primary); color: white; border-radius: 50%; width: 1.5rem; height: 1.5rem; display: flex; align-items: center; justify-content: center; font-size: 0.8rem; font-weight: 700; border: 2px solid white;">@GetCurrentCivilianCount()</div>
                        </div>
                        <div style="font-weight: 600; color: var(--text-primary);">Civilians</div>
                        <div style="font-size: 0.8rem; color: var(--text-muted);">Good guys</div>
                    </div>
                    <div style="text-align: center;">
                        <div style="position: relative; width: 4rem; height: 4rem; margin: 0 auto 0.5rem;">
                            <img src="Undercover-icon.png" alt="Undercover" style="width: 100%; height: 100%; object-fit: contain;" />
                            <div style="position: absolute; top: -10px; right: -10px; background: var(--danger); color: white; border-radius: 50%; width: 1.5rem; height: 1.5rem; display: flex; align-items: center; justify-content: center; font-size: 0.8rem; font-weight: 700; border: 2px solid white;">@GetCurrentUndercoverCount()</div>
                        </div>
                        <div style="font-weight: 600; color: var(--text-primary);">Undercover</div>
                        <div style="font-size: 0.8rem; color: var(--text-muted);">Secret agent</div>
                    </div>
                    <div style="text-align: center;">
                        <div style="position: relative; width: 4rem; height: 4rem; margin: 0 auto 0.5rem;">
                            <img src="Mrwhite-icon.png" alt="Mr. White" style="width: 100%; height: 100%; object-fit: contain;" />
                            <div style="position: absolute; top: -10px; right: -10px; background: var(--text-muted); color: white; border-radius: 50%; width: 1.5rem; height: 1.5rem; display: flex; align-items: center; justify-content: center; font-size: 0.8rem; font-weight: 700; border: 2px solid white;">@GetCurrentMrWhiteCount()</div>
                        </div>
                        <div style="font-weight: 600; color: var(--text-primary);">Mr. White</div>
                        <div style="font-size: 0.8rem; color: var(--text-muted);">Mystery role</div>
                    </div>
                </div>
            </div>

            <!-- Custom Role Configuration -->
            <div class="form-group">
                <div style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 1rem;">
                    <input type="checkbox" @bind="useCustomRoles" id="customRolesToggle" />
                    <label for="customRolesToggle" class="form-label" style="margin: 0;">Customize role distribution</label>
                </div>
                
                @if (useCustomRoles)
                {
                    <div style="background: var(--bg-glass); border: 1px solid var(--border); border-radius: 12px; padding: 1rem; margin-bottom: 1rem;">
                        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem;">
                            <div>
                                <label class="form-label">Undercover Agents: @customUndercoverCount</label>
                                <input type="range" min="0" max="@GetMaxUndercoverCount()" @bind="customUndercoverCount" class="form-control" style="height: 2rem;" />
                                <div style="display: flex; justify-content: space-between; color: var(--text-muted); font-size: 0.8rem;">
                                    <span>0</span><span>@GetMaxUndercoverCount()</span>
                                </div>
                            </div>
                            <div>
                                <label class="form-label">Mr. White: @customMrWhiteCount</label>
                                <input type="range" min="0" max="@GetMaxMrWhiteCount()" @bind="customMrWhiteCount" class="form-control" style="height: 2rem;" />
                                <div style="display: flex; justify-content: space-between; color: var(--text-muted); font-size: 0.8rem;">
                                    <span>0</span><span>@GetMaxMrWhiteCount()</span>
                                </div>
                            </div>
                        </div>
                        @if (!IsRoleDistributionValid())
                        {
                            <div style="color: var(--danger); font-size: 0.9rem; margin-top: 0.5rem; text-align: center;">
                                ⚠️ Total non-civilians cannot exceed half the players (@(playerCount / 2))
                            </div>
                        }
                    </div>
                }
            </div>

            <!-- Quick Start Players -->
            @if (suggestedNames.Any())
            {
                <div class="form-group">
                    <label class="form-label">Quick start - suggested player names</label>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 0.5rem;">
                        @foreach (var name in suggestedNames.Take(playerCount - players.Count))
                        {
                            <button @onclick="() => AddSuggestedPlayer(name)" class="btn btn-secondary" style="padding: 0.5rem;">
                                + @name
                            </button>
                        }
                    </div>
                    @if (suggestedNames.Count > playerCount - players.Count)
                    {
                        <button @onclick="GenerateSuggestedNames" class="btn btn-secondary" style="margin-top: 0.5rem; font-size: 0.9rem;">
                            🎲 Generate different names
                        </button>
                    }
                </div>
            }

            <!-- Current Players -->
            @if (players.Any())
            {
                <div class="form-group">
                    <label class="form-label">Players (@players.Count/@playerCount)</label>
                    <div class="player-list">
                        @foreach (var player in players)
                        {
                            <div class="player-chip">
                                <span class="player-name">@player.Name</span>
                                <button @onclick="() => RemovePlayer(player)" class="btn btn-danger" style="padding: 0.25rem 0.5rem; font-size: 0.8rem;">Remove</button>
                            </div>
                        }
                    </div>
                </div>
            }

            <!-- Add Player -->
            <div class="form-group">
                <label class="form-label">Add player</label>
                <div style="display: flex; gap: 0.5rem;">
                    <input @bind="newPlayerName" @onkeypress="OnPlayerNameKeyPress" placeholder="Enter player name" class="form-control" />
                    <button @onclick="AddPlayer" disabled="@(!CanAddPlayerWithName())" class="btn btn-primary">Add</button>
                </div>
            </div>

            <!-- Start Game -->
            <div style="text-align: center; margin-top: 2rem;">
                <button @onclick="StartGame" disabled="@(!CanStartGame())" class="btn btn-primary" style="font-size: 1.1rem; padding: 1rem 2rem;">
                    @if (gameState?.Status == GameStatus.InProgress)
                    {
                        <span>Starting...</span>
                    }
                    else
                    {
                        <span>Start Undercover Game (@players.Count players)</span>
                    }
                </button>
            </div>
        </div>
    }
    else if (gamePhase == GamePhase.RoleAssignment)
    {
        <!-- Role Assignment Phase -->
        <div class="card">
            <div class="card-header">
                <h1>↩️ @((activeRoundPlayers.Count > currentCardIndex) ? activeRoundPlayers[currentCardIndex].Name : "Player")'s Turn</h1>
                <p style="color: var(--text-muted); text-align: center; margin: 0;">Pass the device to @((activeRoundPlayers.Count > currentCardIndex) ? activeRoundPlayers[currentCardIndex].Name : "Player") to pick their card</p>
            </div>
            
            <!-- Available Cards -->
            <div style="text-align: center; margin-bottom: 2rem;">
                <h3 style="color: var(--text-secondary); margin-bottom: 2rem;">Choose Your Card (@availableCards.Count remaining)</h3>
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 1.5rem; max-width: 600px; margin: 0 auto;">
                    @for (int i = 0; i < availableCards.Count; i++)
                    {
                        var cardIndex = i;
                        <div @onclick="() => PickCard(cardIndex)" 
                             class="game-card"
                             style="aspect-ratio: 0.7; background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary)); border-radius: 16px; display: flex; align-items: center; justify-content: center; cursor: pointer; transition: all 0.3s ease; font-size: 3.5rem; box-shadow: 0 8px 25px rgba(139, 92, 246, 0.3); border: 2px solid rgba(255, 255, 255, 0.1);"
                             onmouseover="this.style.transform='scale(1.08) translateY(-8px)'; this.style.boxShadow='0 12px 35px rgba(139, 92, 246, 0.4)';" 
                             onmouseout="this.style.transform='scale(1) translateY(0)'; this.style.boxShadow='0 8px 25px rgba(139, 92, 246, 0.3)';">
                            🃏
                        </div>
                    }
                </div>
            </div>

            <!-- Instructions -->
            <div style="background: var(--bg-glass); border: 1px solid var(--border); border-radius: 12px; padding: 1.5rem; text-align: center;">
                <p style="color: var(--text-muted); margin: 0; font-size: 1.1rem;">Click on any card above to reveal your role and see your secret word</p>
            </div>
        </div>
    }
    else if (gamePhase == GamePhase.RoleRevealed)
    {
        <!-- Role Revealed -->
        <div class="card">
            <div class="card-header">
                @if (currentPlayerRole == GameConstants.PlayerRoles.MrWhite)
                {
                    <h1 style="display: flex; align-items: center; justify-content: center; gap: 0.5rem;">
                        <img src="Mrwhite-icon.png" alt="Mr. White" style="width: 2rem; height: 2rem; object-fit: contain;" />
                        <span>You are Mr. White!</span>
                    </h1>
                }
                else
                {
                    <h1>🔍 Your Word</h1>
                }
            </div>
            
            <!-- Word Display -->
                <div style="text-align: center; margin-bottom: 3rem;">
                @if (currentPlayerRole != null)
                {
                    @if (currentPlayerRole == GameConstants.PlayerRoles.Civilian)
                    {
                        <div class="word-display">
                            <div class="word-category">Your Word</div>
                            <div class="word-text">@currentGameWordPair?.Civilian</div>
                        </div>
                    }
                    else if (currentPlayerRole == GameConstants.PlayerRoles.Undercover)
                    {
                        <div class="word-display">
                            <div class="word-category">Your Word</div>
                            <div class="word-text">@currentGameWordPair?.Undercover</div>
                        </div>
                    }
                    else if (currentPlayerRole == GameConstants.PlayerRoles.MrWhite)
                    {
                        <div class="word-display">
                            <div class="word-category">You are Mr. White!</div>
                            <div class="word-text">Try to blend in.</div>
                        </div>
                    }
                }
            </div>

            <!-- Continue Button -->
                <div style="text-align: center;">
                <button @onclick="ContinueToNextPlayer" class="btn btn-primary" style="font-size: 1.1rem; padding: 1rem 2rem;">
                    @if (currentCardIndex < (activeRoundPlayers.Count - 1))
                    {
                        <span>Continue to Next Player</span>
                    }
                    else
                    {
                        <span>Start Word Sharing</span>
                    }
                </button>
            </div>
        </div>
    }
    else if (gamePhase == GamePhase.Discussion)
    {
        <!-- Word Sharing Phase -->
        <div class="card">
            <div class="card-header">
                <h1>🔄 Word Sharing Phase</h1>
                <p style="color: var(--text-muted); text-align: center; margin: 0;">Each player says a word related to their card. Follow the order below!</p>
            </div>

            <!-- Players List in Speaking Order -->
            <div class="form-group">
                <label class="form-label">Speaking Order</label>
                <div class="player-list">
                    @{
                        var speakingOrder = GetSpeakingOrder();
                        for (int i = 0; i < speakingOrder.Count; i++)
                        {
                            var player = speakingOrder[i];
                            <div class="player-chip">
                                <span class="player-name">@((i + 1)). @player.Name</span>
                            </div>
                        }
                    }
                </div>
            </div>

            <!-- Instructions moved to separate HowToPlay page -->

            <!-- Manual Progress -->
            <div style="text-align: center;">
                <button @onclick="StartVoting" class="btn btn-primary" style="font-size: 1.1rem; padding: 1rem 2rem;">
                    Start Voting & Discussion
                </button>
            </div>
        </div>
    }
    else if (gamePhase == GamePhase.Voting)
    {
        <!-- Voting & Discussion Phase -->
        <div class="card">
            <div class="card-header">
                <h1>🗳️ Voting & Discussion</h1>
                <p style="color: var(--text-muted); text-align: center; margin: 0;">Discuss who you think is the Undercover agent or Mr. White and vote!</p>
            </div>
            
            <!-- Vote Cards -->
            <div class="vote-grid">
                @foreach (var player in players.Where(p => p.IsActive))
                {
                    <div class="vote-card @(selectedVoteTarget == player.Id ? "selected" : "")" 
                         @onclick="() => SelectVoteTarget(player.Id)">
                        <div style="font-weight: 600; color: var(--text-primary); margin-bottom: 0.5rem;">@player.Name</div>
                        <div style="font-size: 0.9rem; color: var(--text-muted);">Click to vote</div>
                    </div>
                }
            </div>

            <!-- Submit Vote -->
            <div style="text-align: center;">
                <button @onclick="SubmitVote" disabled="@(selectedVoteTarget == null)" class="btn btn-primary" style="font-size: 1.1rem; padding: 1rem 2rem;">
                    Submit Vote
                </button>
            </div>
        </div>
    }
    else if (gamePhase == GamePhase.MrWhiteGuess)
    {
        <!-- Mr. White Guess Phase -->
        <div class="card">
            <div class="card-header">
                <h1>❓ Mr. White's Last Chance</h1>
                <p style="color: var(--text-muted); text-align: center; margin: 0;">@votedOutMrWhite?.Name has been voted out! Can you guess the civilian word?</p>
            </div>
            
            <!-- Mr. White Info -->
            <div class="phase-indicator">
                <div class="phase-title">Final Challenge</div>
                <div class="phase-description">If you guess correctly, you win and get 3 points.</div>
            </div>

            <!-- Guess Input -->
            <div class="form-group">
                <label class="form-label">What is the civilian word?</label>
                <div style="display: flex; gap: 0.5rem;">
                    <input @bind="mrWhiteGuess" @onkeypress="OnMrWhiteGuessKeyPress" placeholder="Enter your guess..." class="form-control" style="flex: 1;" />
                    <button @onclick="SubmitMrWhiteGuess" disabled="@string.IsNullOrWhiteSpace(mrWhiteGuess)" class="btn btn-primary">Submit Guess</button>
                </div>
            </div>

            <!-- Instructions -->
            <div style="background: var(--bg-glass); border: 1px solid var(--border); border-radius: 12px; padding: 1.5rem;">
                <p style="color: var(--text-muted); margin: 0; text-align: center;">
                    <strong>Pass the device to @votedOutMrWhite?.Name</strong><br />
                    Type the word you think the civilians had. If correct, you win the entire round!
                </p>
            </div>
        </div>
    }
    else if (gamePhase == GamePhase.MrWhiteEliminated)
    {
        <!-- Mr. White Eliminated Phase -->
        <div class="card">
            <div class="card-header">
                <h1>❌ Mr. White Eliminated</h1>
                <p style="color: var(--text-muted); text-align: center; margin: 0;">@votedOutMrWhite?.Name guessed incorrectly and has been eliminated!</p>
            </div>
            
            <!-- Elimination Info -->
            <div style="text-align: center; margin-bottom: 2rem;">
                <div style="font-size: 3rem; margin-bottom: 1rem;">💀</div>
                <h2 style="color: var(--danger); margin-bottom: 1rem;">Wrong Guess!</h2>
                <div style="background: var(--bg-glass); border: 1px solid var(--border); border-radius: 12px; padding: 1.5rem; margin-bottom: 1.5rem;">
                    <p style="color: var(--text-muted); margin: 0; font-size: 1.1rem;">
                        <strong>@votedOutMrWhite?.Name</strong> guessed: "<strong>@mrWhiteGuess</strong>"<br />
                    </p>
                </div>
                <p style="color: var(--text-muted);">@votedOutMrWhite?.Name is eliminated from this round.</p>
            </div>

            <!-- Continue Button -->
            <div style="text-align: center;">
                @if (players.Count <= 2)
                {
                    <button @onclick="() => gamePhase = GamePhase.Results" class="btn btn-primary" style="font-size: 1.1rem; padding: 1rem 2rem;">
                        View Final Results
                    </button>
                }
                else
                {
                    <button @onclick="StartNewWordRound" class="btn btn-primary" style="font-size: 1.1rem; padding: 1rem 2rem;">
                        Continue New Word Round
                    </button>
                }
            </div>
        </div>
    }
    else if (gamePhase == GamePhase.PlayerEliminated)
    {
        <!-- Generic Player Eliminated Reveal Phase -->
        <div class="card">
            <div class="card-header">
                <h1>❌ Player Eliminated</h1>
                <p style="color: var(--text-muted); text-align: center; margin: 0;">@eliminatedPlayer?.Name was voted out. Their role is revealed below.</p>
            </div>

            <div style="text-align: center; margin-bottom: 2rem;">
                <div style="margin-bottom: 1rem;">
                    @if (eliminatedPlayer != null)
                    {
                        @if (eliminatedPlayer.Role == GameConstants.PlayerRoles.Civilian)
                        {
                            <img src="Civilian-icon.png" alt="Civilian" style="width: 5rem; height: 5rem; object-fit: contain;" />
                        }
                        else if (eliminatedPlayer.Role == GameConstants.PlayerRoles.Undercover)
                        {
                            <img src="Undercover-icon.png" alt="Undercover" style="width: 5rem; height: 5rem; object-fit: contain;" />
                        }
                        else if (eliminatedPlayer.Role == GameConstants.PlayerRoles.MrWhite)
                        {
                            <img src="Mrwhite-icon.png" alt="Mr. White" style="width: 5rem; height: 5rem; object-fit: contain;" />
                        }
                        else
                        {
                            <span style="font-size: 3rem;">🃏</span>
                        }
                    }
                </div>
                <h2 style="color: var(--accent-primary); margin-bottom: 0.5rem;">@GetRoleDisplayName(eliminatedPlayer?.Role ?? "")</h2>
                <div style="background: var(--bg-glass); border: 1px solid var(--border); border-radius: 12px; padding: 1.5rem; margin-top: 1rem;">
                    <p style="color: var(--text-muted); margin: 0;">They are out for the rest of this game.</p>
                </div>
            </div>

            <div style="text-align: center;">
                <button @onclick="ContinueAfterPlayerElimination" class="btn btn-primary" style="font-size: 1.1rem; padding: 1rem 2rem;">Continue</button>
            </div>
        </div>
    }
    else if (gamePhase == GamePhase.Results)
    {
        <!-- Results Phase -->
        <div class="card">
            <div class="card-header">
                <h1>🏆 Game Results</h1>
            </div>
            
            <!-- Winner Display -->
            @if (gameResult != null)
            {
                <div style="text-align: center; margin-bottom: 2rem;">
                    <div style="margin-bottom: 1rem;">
                        @if (gameResult.Winner == "Civilians")
                        {
                            <img src="Civilian-icon.png" alt="Civilians Win" style="width: 5rem; height: 5rem; object-fit: contain;" />
                        }
                        else if (gameResult.Winner == "Undercover")
                        {
                            <img src="Undercover-icon.png" alt="Undercover Wins" style="width: 5rem; height: 5rem; object-fit: contain;" />
                        }
                        else if (gameResult.Winner == "Mr. White")
                        {
                            <img src="Mrwhite-icon.png" alt="Mr. White Wins" style="width: 5rem; height: 5rem; object-fit: contain;" />
                        }
                        else
                        {
                            <span style="font-size: 3rem;">❓</span>
                        }
                    </div>
                    <h2 style="color: var(--accent-primary); margin-bottom: 0.5rem;">@gameResult.Winner Wins!</h2>
                    <p style="color: var(--text-muted);">@gameResult.Reason</p>
                </div>

                <!-- Player Roles Revealed -->
                <div class="form-group">
                    <label class="form-label">Player Roles & Scores</label>
                    <div class="player-list">
                        @foreach (var player in players.OrderByDescending(p => p.Score))
                        {
                            <div class="player-chip">
                                <div style="display: flex; align-items: center; gap: 0.5rem;">
                                    @if (player.Role == GameConstants.PlayerRoles.Civilian)
                                    {
                                        <img src="Civilian-icon.png" alt="Civilian" style="width: 2rem; height: 2rem; object-fit: contain;" />
                                    }
                                    else if (player.Role == GameConstants.PlayerRoles.Undercover)
                                    {
                                        <img src="Undercover-icon.png" alt="Undercover" style="width: 2rem; height: 2rem; object-fit: contain;" />
                                    }
                                    else if (player.Role == GameConstants.PlayerRoles.MrWhite)
                                    {
                                        <img src="Mrwhite-icon.png" alt="Mr. White" style="width: 2rem; height: 2rem; object-fit: contain;" />
                                    }
                                    <span class="player-name">@player.Name</span>
                                </div>
                                <div style="display: flex; align-items: center; gap: 0.5rem;">
                                    <span class="role-badge role-@player.Role.ToLower()">
                                        @GetRoleDisplayName(player.Role)
                                    </span>
                                    <span class="score-badge">@player.Score pts</span>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- Word Reveal -->
                @if (currentGameWordPair != null)
                {
                    <div class="phase-indicator">
                        <div class="phase-title">The Words Were</div>
                        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; margin-top: 1rem;">
                            <div style="text-align: center;">
                                <div style="font-weight: 600; color: var(--accent-primary);">Civilian Word</div>
                                <div style="font-size: 1.2rem; color: var(--text-primary);">@currentGameWordPair.Civilian</div>
                            </div>
                            <div style="text-align: center;">
                                <div style="font-weight: 600; color: var(--danger);">Undercover Word</div>
                                <div style="font-size: 1.2rem; color: var(--text-primary);">@currentGameWordPair.Undercover</div>
                            </div>
                        </div>
                    </div>
                }
            }

            <!-- Game Actions -->
            <div style="text-align: center; margin-top: 2rem;">
                <div style="display: flex; gap: 1rem; justify-content: center, flex-wrap: wrap;">
                    <button @onclick="NextRound" class="btn btn-primary" style="font-size: 1.1rem; padding: 1rem 2rem;">
                        🎲 Next Round
                    </button>
                    <button @onclick="ResetGame" class="btn btn-secondary" style="font-size: 1.1rem; padding: 1rem 2rem;">
                        🔄 New Game
                    </button>
                </div>
                <p style="margin-top: 0.5rem; color: var(--text-muted); font-size: 0.9rem;">
                    Next Round keeps the same players • New Game starts fresh
                </p>
            </div>
        </div>
    }
    <!-- Small links: how-to and feedback -->
    <div style="text-align:center; margin-top:0.5rem; display:flex; flex-direction:column; gap:0.25rem; align-items:center;">
    <a href="how-to-play" style="font-size:0.8rem; color:var(--accent-primary); text-decoration:none;">How to play</a>
        <a href="https://github.com/ArdonToonstra/undercover-game/issues" target="_blank" rel="noopener noreferrer" style="font-size:0.8rem; color:var(--text-muted); opacity:0.85; text-decoration:none; border-bottom:1px dotted rgba(0,0,0,0.12);">
            Feedback / Report an issue
        </a>
    </div>
</div>

@code {
    // Game state
    private GamePhase gamePhase = GamePhase.Setup;
    private GameStateDTO? gameState;
    private GameResultDTO? gameResult;
    private List<GamePlayer> players = new();
    private string newPlayerName = "";
    private int playerCount = 5;
    // When true, the initial role assignment will follow the players[] insertion order
    private bool isFirstRound = true;
    
    // Custom role configuration
    private int customUndercoverCount = 1;
    private int customMrWhiteCount = 1;
    private bool useCustomRoles = false;
    
    // Language and word categories
    private List<WordPairCategory> wordCategories = new();
    private string selectedCategoryName = "";
    
    // Role assignment
    private List<(string Role, WordPair? WordPair)> availableCards = new();
    private int currentCardIndex = 0;
    private string? currentPlayerRole;
    private WordPair? currentGameWordPair;
    
    // Discussion & Voting
    private string? selectedVoteTarget;
    
    // Mr. White guess
    private GamePlayer? votedOutMrWhite;
    private string mrWhiteGuess = "";
    // Generic eliminated player (non-Mr White) for reveal phase
    private GamePlayer? eliminatedPlayer;
    
    // Suggested players
    private List<string> suggestedNames = new();
    
    // Local player class with role
    public class GamePlayer
    {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public string Role { get; set; } = string.Empty;
        public int Score { get; set; } = 0;
    // Whether the player is currently active in the ongoing round/game
    public bool IsActive { get; set; } = true;
    }
    
    private enum GamePhase
    {
        Setup,
        RoleAssignment,
        RoleRevealed,
        Discussion,
        Voting,
        MrWhiteGuess,
        MrWhiteEliminated,
        PlayerEliminated,
        Results
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadWordCategories();
        GenerateSuggestedNames();
    }

    private async Task LoadWordCategories()
    {
        try
        {
            wordCategories = await WordPairService.GetCategoriesAsync();
            if (wordCategories.Any())
            {
                selectedCategoryName = "🎲 Mix All English Categories!"; // Default to English mixed mode
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading word categories: {ex.Message}");
        }
    }

    private void GenerateSuggestedNames()
    {
        var allNames = new List<string>
        {
            "SneakyPanda", "NinjaTaco", "CosmicBurrito", "CaptainChaos", "MysteryMuffin", "ShadowPickle",
            "WizardWaffle", "StealthySpoon", "RogueRabbit", "SecretSauce", "PhantomPizza", "CloakedCookie",
            "SpySquirrel", "HiddenHamster", "DeceptiveDuck", "TrickyTurtle", "SlySalmon", "CraftyCarrot",
            "SneakySnail", "CleverCactus", "WilyWombat", "DeviantDonut", "MischievousMango", "CunningCupcake",
            "ArtfulAvocado", "SubtleSandwich", "ElusiveEggplant", "FoxyFalafel", "GuiltyGrape", "LurkerLemon",
            "BanditBagel", "RascalRadish", "VagabondVegetable", "OutlawOnion", "RebelRice", "PiratePickle",
            "ThiefTaco", "MarauderMuffin", "ScoundrelSoup", "VillainVanilla", "RogueRamen", "TricksterTofu", 
            "CunningCucumber", "SlySpinach", "WilyWatermelon", "DeceptiveDoughnut", "CraftyCabbage", "SneakySushi"
        };

        var random = new Random();
        suggestedNames = allNames.OrderBy(x => random.Next()).Take(12).ToList();
    }

    private async Task OnPlayerCountChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int count))
        {
            playerCount = count;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void AddSuggestedPlayer(string name)
    {
        if (CanAddPlayer() && !players.Any(p => p.Name.Equals(name, StringComparison.OrdinalIgnoreCase)))
        {
            players.Add(new GamePlayer { Id = Guid.NewGuid().ToString(), Name = name });
            suggestedNames.Remove(name); // Remove from suggestions once added
            StateHasChanged();
        }
    }

    private async Task OnPlayerNameKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await AddPlayer();
        }
    }

    private async Task AddPlayer()
    {
        if (CanAddPlayerWithName())
        {
            var trimmedName = newPlayerName.Trim();
            if (!players.Any(p => p.Name.Equals(trimmedName, StringComparison.OrdinalIgnoreCase)))
            {
                players.Add(new GamePlayer { Id = Guid.NewGuid().ToString(), Name = trimmedName });
                newPlayerName = "";
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private void RemovePlayer(GamePlayer player)
    {
        players.Remove(player);
        StateHasChanged();
    }

    private bool CanAddPlayer()
    {
        return players.Count < playerCount;
    }

    private bool CanAddPlayerWithName()
    {
        return players.Count < playerCount && !string.IsNullOrWhiteSpace(newPlayerName);
    }

    private bool CanStartGame()
    {
        return players.Count >= 3 && 
               players.Count == playerCount && 
               !string.IsNullOrEmpty(selectedCategoryName) &&
               IsRoleDistributionValid();
    }

    private async Task StartGame()
    {
        try
        {
            WordPairCategory selectedCategory;
            
            if (selectedCategoryName == "🎲 Mix All English Categories!")
            {
                // Create a combined category with all English word pairs
                var englishCategories = wordCategories.Where(c => c.Language == "EN").ToList();
                selectedCategory = new WordPairCategory
                {
                    Name = "🎲 Mix All English Categories!",
                    Description = "All English categories combined for maximum variety!",
                    Language = "EN",
                    Pairs = englishCategories.SelectMany(c => c.Pairs).ToList()
                };
            }
            else if (selectedCategoryName == "🎲 Mix All Dutch Categories!")
            {
                // Create a combined category with all Dutch word pairs
                var dutchCategories = wordCategories.Where(c => c.Language == "NL").ToList();
                selectedCategory = new WordPairCategory
                {
                    Name = "🎲 Mix All Dutch Categories!",
                    Description = "Alle Nederlandse categorieën gecombineerd voor maximale variatie!",
                    Language = "NL",
                    Pairs = dutchCategories.SelectMany(c => c.Pairs).ToList()
                };
            }
            else
            {
                var category = wordCategories.FirstOrDefault(c => c.Name == selectedCategoryName);
                if (category == null) return;
                selectedCategory = category;
            }

            // Create game through LocalGameService
            var createGameDto = new CreateGameRequestDTO
            {
                HostNickname = players.FirstOrDefault()?.Name ?? "Host",
                GameType = "Undercover"
            };

            gameState = await LocalGameService.CreateGameAsync(createGameDto);

            // Guard: CreateGameAsync may return null in error scenarios
            if (gameState == null)
            {
                Console.WriteLine("Failed to create game (CreateGameAsync returned null).");
                return;
            }

            // Add players to the game (all current players)
            foreach (var player in players.Skip(1)) // Skip the first player as they're already the host
            {
                await LocalGameService.JoinGameAsync(gameState.GameId, new JoinGameRequestDTO { Nickname = player.Name });
            }

            // Start the game
            await LocalGameService.StartGameAsync(gameState.GameId);

            // Get updated game state
            gameState = await LocalGameService.GetGameStateAsync(gameState.GameId);
            
            // Ensure the first role assignment preserves the player add order
            isFirstRound = true;
            // Set up role assignment
            SetupRoleAssignment(selectedCategory);
            gamePhase = GamePhase.RoleAssignment;
            
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error starting game: {ex.Message}");
        }
    }

    private void SetupRoleAssignment(WordPairCategory category)
    {
        var random = new Random();
        var selectedPair = category.Pairs[random.Next(category.Pairs.Count)];
        currentGameWordPair = selectedPair;

        // Create role distribution based on CURRENT number of players
        // Only count active players for role distribution
        var currentPlayerCount = players.Count(p => p.IsActive);
        var roles = new List<string>();
        
        // Determine role counts based on custom or default settings
        int civilianCount, undercoverCount, mrWhiteCount;
        
        if (useCustomRoles)
        {
            undercoverCount = customUndercoverCount;
            mrWhiteCount = customMrWhiteCount;
            civilianCount = currentPlayerCount - undercoverCount - mrWhiteCount;
        }
        else
        {
            civilianCount = GetCivilianCountForPlayerCount(currentPlayerCount);
            undercoverCount = GetUndercoverCountForPlayerCount(currentPlayerCount);
            mrWhiteCount = GetMisterWhiteCountForPlayerCount(currentPlayerCount);
        }
        
        // Add civilians
        for (int i = 0; i < civilianCount; i++)
        {
            roles.Add(GameConstants.PlayerRoles.Civilian);
        }
        
        // Add undercover
        for (int i = 0; i < undercoverCount; i++)
        {
            roles.Add(GameConstants.PlayerRoles.Undercover);
        }
        
        // Add Mr. White
        for (int i = 0; i < mrWhiteCount; i++)
        {
            roles.Add(GameConstants.PlayerRoles.MrWhite);
        }

        // Shuffle roles
        roles = roles.OrderBy(x => random.Next()).ToList();

        // Create available cards (capture currentGameWordPair as nullable)
        // Create available cards only for active players
        availableCards = roles.Select(role => (role, (WordPair?)currentGameWordPair)).ToList();
        
        // Build the active round players list (players who are marked IsActive)
        // For the very first round preserve the player addition order. Subsequent rounds are randomized.
        if (isFirstRound)
        {
            activeRoundPlayers = players.Where(p => p.IsActive).ToList();
            // Only preserve order for the first assignment
            isFirstRound = false;
        }
        else
        {
            activeRoundPlayers = players.Where(p => p.IsActive).OrderBy(_ => random.Next()).ToList();
        }

        // Ensure availableCards matches number of active players
        if (availableCards.Count > activeRoundPlayers.Count)
        {
            availableCards = availableCards.Take(activeRoundPlayers.Count).ToList();
        }

        currentCardIndex = 0;
    }

    private async Task PickCard(int cardIndex)
    {
        if (cardIndex >= 0 && cardIndex < availableCards.Count)
        {
            var selectedCard = availableCards[cardIndex];
            currentPlayerRole = selectedCard.Role;
            
            // Assign role to current active round player
            activeRoundPlayers[currentCardIndex].Role = selectedCard.Role;
            
            // Remove the selected card
            availableCards.RemoveAt(cardIndex);
            
            gamePhase = GamePhase.RoleRevealed;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ContinueToNextPlayer()
    {
        currentCardIndex++;
        
    if (currentCardIndex >= activeRoundPlayers.Count)
        {
            // All players have picked cards, start discussion
            gamePhase = GamePhase.Discussion;
        }
        else
        {
            // Next player's turn
            gamePhase = GamePhase.RoleAssignment;
            currentPlayerRole = null;
        }
        
        await InvokeAsync(StateHasChanged);
    }

    private List<GamePlayer> GetSpeakingOrder()
    {
        // Ensure Mr. White is not always last, but also never first.
        // Strategy:
        // - Shuffle non-MrWhite players
        // - Shuffle MrWhite players
        // - Insert MrWhite players at random positions in the non-MrWhite list
        //   with the constraint that no MrWhite may occupy index 0.
        var random = new Random();
    // Use only active players for the speaking order
    var activePlayers = players.Where(p => p.IsActive).ToList();
    var nonMrWhitePlayers = activePlayers.Where(p => p.Role != GameConstants.PlayerRoles.MrWhite)
                       .OrderBy(_ => random.Next())
                       .ToList();
    var mrWhitePlayers = activePlayers.Where(p => p.Role == GameConstants.PlayerRoles.MrWhite)
                     .OrderBy(_ => random.Next())
                     .ToList();

        // If there are no non-MrWhite players, just return the list (can't enforce position)
        if (!nonMrWhitePlayers.Any())
        {
            return mrWhitePlayers;
        }

        // Insert each MrWhite into a random position excluding index 0.
        foreach (var mr in mrWhitePlayers)
        {
            // allowed insertion indices: 1 .. nonMrWhitePlayers.Count (inclusive) so it can end up last
            var insertIndex = random.Next(1, nonMrWhitePlayers.Count + 1);
            nonMrWhitePlayers.Insert(insertIndex, mr);
        }

        return nonMrWhitePlayers;
    }

    // Players participating in the current round (active and in picking order)
    private List<GamePlayer> activeRoundPlayers = new();

    private async Task StartVoting()
    {
        gamePhase = GamePhase.Voting;
        selectedVoteTarget = null;
        await InvokeAsync(StateHasChanged);
    }

    private void SelectVoteTarget(string playerId)
    {
        selectedVoteTarget = playerId;
        StateHasChanged();
    }

    private async Task SubmitVote()
    {
        if (selectedVoteTarget != null)
        {
            var votedPlayer = players.FirstOrDefault(p => p.Id == selectedVoteTarget && p.IsActive);
            if (votedPlayer != null)
            {
                // Check if Mr. White was voted out
                if (votedPlayer.Role == GameConstants.PlayerRoles.MrWhite)
                {
                    votedOutMrWhite = votedPlayer;
                    gamePhase = GamePhase.MrWhiteGuess;
                    mrWhiteGuess = "";
                    await InvokeAsync(StateHasChanged);
                }
                else
                {
                    // Eliminate and show role reveal card
                    votedPlayer.IsActive = false;
                    eliminatedPlayer = votedPlayer;
                    gamePhase = GamePhase.PlayerEliminated;
                    await InvokeAsync(StateHasChanged);
                }
            }
        }
    }

    private async Task OnMrWhiteGuessKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SubmitMrWhiteGuess();
        }
    }

    private async Task SubmitMrWhiteGuess()
    {
        if (string.IsNullOrWhiteSpace(mrWhiteGuess) || votedOutMrWhite == null || currentGameWordPair == null)
            return;

        var guess = mrWhiteGuess.Trim();
        var civilianWord = currentGameWordPair.Civilian;

        if (guess.Equals(civilianWord, StringComparison.OrdinalIgnoreCase))
        {
            // Mr. White guessed correctly - wins the round
            gameResult = new GameResultDTO
            {
                Winner = "Mr. White",
                Reason = $"Mr. White ({votedOutMrWhite.Name}) correctly guessed the civilian word: '{civilianWord}'!"
            };
            
            // Award 3 points to Mr. White
            votedOutMrWhite.Score += 3;
            
            gamePhase = GamePhase.Results;
        }
        else
        {
            // Mr. White guessed wrong - show elimination phase
            gamePhase = GamePhase.MrWhiteEliminated;
        }
        
        await InvokeAsync(StateHasChanged);
    }

    private async Task ContinueWithoutMrWhite()
    {
        if (votedOutMrWhite == null) return;

        // Mark Mr. White inactive for the remainder of this round
        votedOutMrWhite.IsActive = false;

        // Check if game should end (only 2 active players left, etc.)
    // Evaluate victory or continue
    await EvaluateVictoryOrContinueAsync();
    }

    private async Task StartNewWordRound()
    {
        await ContinueWithoutMrWhite();
    }

    private async Task ContinueAfterPlayerElimination()
    {
        await EvaluateVictoryOrContinueAsync();
    }

    // New unified victory evaluation method based on current active players
    private async Task EvaluateVictoryOrContinueAsync()
    {
        var activeCivilians = players.Count(p => p.IsActive && p.Role == GameConstants.PlayerRoles.Civilian);
        var activeUndercover = players.Count(p => p.IsActive && p.Role == GameConstants.PlayerRoles.Undercover);
        var activeMrWhite = players.Count(p => p.IsActive && p.Role == GameConstants.PlayerRoles.MrWhite);

        // Civilian victory: all Undercover and Mr. White eliminated
        if (activeUndercover == 0 && activeMrWhite == 0)
        {
            gameResult = new GameResultDTO
            {
                Winner = "Civilians",
                Reason = "All Undercover agents and Mr. White were eliminated!"
            };
            foreach (var civ in players.Where(p => p.Role == GameConstants.PlayerRoles.Civilian))
            {
                civ.Score++;
            }
            gamePhase = GamePhase.Results;
        }
        // Undercover victory: civs eliminated OR parity (non-civs >= civs)
        else if (activeCivilians == 0 || (activeUndercover + activeMrWhite) >= activeCivilians)
        {
            gameResult = new GameResultDTO
            {
                Winner = "Undercover",
                Reason = activeCivilians == 0 ? "All civilians eliminated!" : "Undercovers can no longer be outvoted (parity reached)."
            };
            foreach (var u in players.Where(p => p.Role == GameConstants.PlayerRoles.Undercover || p.Role == GameConstants.PlayerRoles.MrWhite))
            {
                if (u.IsActive) u.Score++;
            }
            gamePhase = GamePhase.Results;
        }
        else
        {
            // Continue game: next discussion round with remaining active players using same word pair
            selectedVoteTarget = null;
            votedOutMrWhite = null;
            mrWhiteGuess = "";
            eliminatedPlayer = null;
            gamePhase = GamePhase.Discussion;
        }

        if (gamePhase == GamePhase.Results && gameState != null)
        {
            gameState.Status = GameStatus.Finished;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task ResetGame()
    {
        gamePhase = GamePhase.Setup;
        gameState = null;
        gameResult = null;
        players.Clear();
        newPlayerName = "";
        availableCards.Clear();
        currentCardIndex = 0;
        currentPlayerRole = null;
        currentGameWordPair = null;
        selectedVoteTarget = null;
        votedOutMrWhite = null;
        mrWhiteGuess = "";
        
        GenerateSuggestedNames();
        await InvokeAsync(StateHasChanged);
    }

    private async Task NextRound()
    {
        // Keep the same players and configuration, but start a new round
        gamePhase = GamePhase.RoleAssignment;
        gameState = null;
        gameResult = null;
        availableCards.Clear();
        currentCardIndex = 0;
        currentPlayerRole = null;
        currentGameWordPair = null;
        selectedVoteTarget = null;
        votedOutMrWhite = null;
        mrWhiteGuess = "";
        
        // Reset all players to have no role assignments for the new round
        // Also ensure any players who were marked inactive (e.g. eliminated Mr. White)
        // are reactivated for the new round.
        foreach (var player in players)
        {
            player.Role = "";
            player.IsActive = true;
        }
        
        // Start the new game with the same configuration
        await StartGame();
    }

    // Helper methods for original player count (used in setup UI)
    private int GetCivilianCount()
    {
        return GetCivilianCountForPlayerCount(playerCount);
    }

    private int GetUndercoverCount()
    {
        return GetUndercoverCountForPlayerCount(playerCount);
    }

    private int GetMisterWhiteCount()
    {
        return GetMisterWhiteCountForPlayerCount(playerCount);
    }

    // Helper methods for specific player count (used for role assignment)
    private int GetCivilianCountForPlayerCount(int count)
    {
        return count switch
        {
            3 => 2,  // 2 civilians, 1 undercover, 0 white
            4 => 2,  // 2 civilians, 1 undercover, 1 white
            5 => 3,  // 3 civilians, 1 undercover, 1 white
            6 => 3,  // 3 civilians, 2 undercover, 1 white
            7 => 4,  // 4 civilians, 2 undercover, 1 white
            8 => 4,  // 4 civilians, 2 undercover, 2 white
            9 => 5,  // 5 civilians, 2 undercover, 2 white
            10 => 5, // 5 civilians, 3 undercover, 2 white
            _ => Math.Max(1, count - GetUndercoverCountForPlayerCount(count) - GetMisterWhiteCountForPlayerCount(count))
        };
    }

    private int GetUndercoverCountForPlayerCount(int count)
    {
        return count switch
        {
            3 => 1,
            4 => 1,
            5 => 1,
            6 => 2,
            7 => 2,
            8 => 2,
            9 => 2,
            10 => 3,
            _ => 1
        };
    }

    private int GetMisterWhiteCountForPlayerCount(int count)
    {
        return count switch
        {
            3 => 0,
            4 => 1,
            5 => 1,
            6 => 1,
            7 => 1,
            8 => 2,
            9 => 2,
            10 => 2,
            _ => count >= 4 ? 1 : 0
        };
    }

    private string GetRoleDisplayName(string role)
    {
        return role switch
        {
            GameConstants.PlayerRoles.Civilian => "Civilian",
            GameConstants.PlayerRoles.Undercover => "Undercover Agent",
            GameConstants.PlayerRoles.MrWhite => "Mr. White",
            _ => "Unknown"
        };
    }

    // Methods for current role distribution display
    private int GetCurrentCivilianCount()
    {
        if (useCustomRoles)
        {
            return playerCount - customUndercoverCount - customMrWhiteCount;
        }
        return GetCivilianCount();
    }

    private int GetCurrentUndercoverCount()
    {
        return useCustomRoles ? customUndercoverCount : GetUndercoverCount();
    }

    private int GetCurrentMrWhiteCount()
    {
        return useCustomRoles ? customMrWhiteCount : GetMisterWhiteCount();
    }

    // Validation methods for custom role configuration
    private bool IsRoleDistributionValid()
    {
        if (!useCustomRoles) return true;
        
        var totalNonCivilians = customUndercoverCount + customMrWhiteCount;
        var maxNonCivilians = playerCount / 2;
        
        return totalNonCivilians <= maxNonCivilians && 
               totalNonCivilians >= 0 && 
               customUndercoverCount >= 0 && 
               customMrWhiteCount >= 0;
    }

    private int GetMaxUndercoverCount()
    {
        var maxNonCivilians = playerCount / 2;
        return Math.Max(0, maxNonCivilians - customMrWhiteCount);
    }

    private int GetMaxMrWhiteCount()
    {
        var maxNonCivilians = playerCount / 2;
        return Math.Max(0, maxNonCivilians - customUndercoverCount);
    }

    private string FormatTime(int seconds)
    {
        var minutes = seconds / 60;
        var remainingSeconds = seconds % 60;
        return $"{minutes:D2}:{remainingSeconds:D2}";
    }

    public void Dispose()
    {
    }
}
